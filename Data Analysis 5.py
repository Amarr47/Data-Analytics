import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression,Ridge
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import PolynomialFeatures,StandardScaler
from sklearn.model_selection import train_test_split,cross_val_predict,GridSearchCV
def PollyPlot(xtrain, xtest, y_train, y_test, lr, poly_transform):
    xmax = max([xtrain.values.max(), xtest.values.max()])
    xmin = min([xtrain.values.min(), xtest.values.min()])
    x = np.arange(xmin, xmax, 0.1)
    plt.plot(xtrain, y_train, 'ro', label='Training Data')
    plt.plot(xtest, y_test, 'go', label='Test Data')
    plt.plot(x, lr.predict(poly_transform.fit_transform(x.reshape(-1, 1))), label='Predicted Function')
    plt.ylim([-10000, 60000])
    plt.ylabel('Price')
    plt.legend()
#training data
    # testing data
    # lr:  linear regression object
    # poly_transform:  polynomial transformation object
#path = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/Data%20files/module_5_auto.csv'
df = pd.read_csv('Cleandata1.csv')
df=df._get_numeric_data()
ydata = df['price']
xdata = df.drop('price',axis=1)
xtrain,xtest,ytrain,ytest = train_test_split(xdata,ydata,test_size=0.3,random_state=0)
tr = LinearRegression()
tr.fit(xtrain[['horsepower']],ytrain)
print(tr.predict(xtrain[['horsepower']][0:11]),'\n')
te = LinearRegression()
te.fit(xtest[['horsepower']],ytest)
print(te.predict(xtest[['horsepower']][0:11]),'\n')
print(te.score(xtrain[['horsepower']],ytrain),'\n')
print(te.score(xtest[['horsepower']],ytest),'\n')
trcross = cross_val_predict(tr,xtrain[['horsepower']],ytrain,cv=3)
print(trcross[0:11],'\n')
tecross = cross_val_predict(te,xtest[['horsepower']],ytest,cv=3)
print(tecross[0:11],'\n')
lr = LinearRegression()
lr.fit(xtrain[['horsepower', 'curb-weight', 'engine-size', 'highway-mpg']],ytrain)
yhattrain = lr.predict(xtrain[['horsepower', 'curb-weight', 'engine-size', 'highway-mpg']])
print(yhattrain[0:11],'\n')
lr.fit(xtest[['horsepower', 'curb-weight', 'engine-size', 'highway-mpg']],ytest)
yhattest = lr.predict(xtest[['horsepower', 'curb-weight', 'engine-size', 'highway-mpg']])
print(yhattest[0:11],'\n')
ax1 = sns.distplot(ytest,hist=False,color='r',label='Actual Value')
sns.distplot(yhattest,hist=False,color='b',label='Predicted Trained Value',ax=ax1)
plt.close()
xtrain,xtest,ytrain,ytest = train_test_split(xdata,ydata,test_size=0.45,random_state=0)
pr = PolynomialFeatures(degree=5)
xtrainpr = pr.fit_transform(xtrain[['curb-weight']])
xtestpr = pr.fit_transform(xtest[['curb-weight']])
poly = LinearRegression()
poly.fit(xtrainpr,ytrain)
A = poly.predict(xtrainpr)
print(A[0:11],'\n')
poly.fit(xtestpr,ytest)
B = poly.predict(xtestpr)
print(B[0:11],'\n')
#PollyPlot(xtrain[['curb-weight']], xtest[['curb-weight']], ytrain, ytest,poly,pr)
plt.show()
plt.close()
print(poly.score(xtrainpr,ytrain),'\n')
print(poly.score(xtestpr,ytest),'\n')
Rsqu_test = []
order = [1,2,3,4]
for n in order:
    pr = PolynomialFeatures(degree=n)
    xtrainpr=pr.fit_transform(xtrain[['horsepower']])
    xtestpr=pr.fit_transform(xtest[['horsepower']])
    tr.fit(xtrainpr,ytrain)
    Rsqu_test.append(tr.score(xtestpr,ytest))
plt.plot(order,Rsqu_test)
plt.close()
def f(order, test_data):
    x_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size=test_data, random_state=0)
    pr = PolynomialFeatures(degree=order)
    x_train_pr = pr.fit_transform(x_train[['horsepower']])
    x_test_pr = pr.fit_transform(x_test[['horsepower']])
    poly = LinearRegression()
    poly.fit(x_train_pr,y_train)
    PollyPlot(xtrain[['horsepower']], x_test[['horsepower']], y_train,y_test, poly, pr)
r = Ridge(alpha=0.1)
pf = PolynomialFeatures(degree=2)
xtrainpf = pr.fit_transform(xtrain[['wheel-base','length','width']])
r.fit(xtrainpf,ytrain)
rp = r.predict(xtrainpf)
print(rp[0:11],'\n')
aa = sns.distplot(ytrain,hist=False,color='r',label='Actual Value')
sns.distplot(rp,hist=False,color='b',label='Ridge Predicted',ax=aa)
plt.close()
Input=[('scale',StandardScaler()),('polynomial',PolynomialFeatures(degree=16,include_bias=False)),('model',Ridge(alpha=0.1))]
pipe = Pipeline(Input)
xpipe = xtrain[['highway-mpg','peak-rpm']]
pipe.fit(xpipe,ytrain)
pipeprice=pipe.predict(xpipe)
print(pipeprice[0:11])
aa = sns.distplot(ytrain,hist=False,color='r',label='Actual Value')
sns.distplot(pipeprice,hist=False,color='b',label='Ridge Predicted',ax=aa)
plt.close()
parameters = [{'alpha':[0.001,0.1,1, 10, 100, 1000, 10000, 100000, 100000]}]
gg = GridSearchCV(r,parameters,cv=4)
gg.fit(xtrain[['horsepower','engine-size','curb-weight','highway-mpg']],ytrain)
print(gg.best_estimator_)
gprice = gg.predict(xtrain[['horsepower','engine-size','curb-weight','highway-mpg']])
print(gprice[0:11])
aa = sns.distplot(ytrain,hist=False,color='r',label='Actual Value')
sns.distplot(gprice,hist=False,color='b',label='Ridge Predicted',ax=aa)
plt.close()
r1 = Ridge(alpha=10000)
r1.fit(xtrain[['horsepower','engine-size','curb-weight','highway-mpg']],ytrain)
rprice = r1.predict(xtrain[['horsepower','engine-size','curb-weight','highway-mpg']])
print(rprice[0:11])
aa = sns.distplot(ydata,hist=False,color='r',label='Actual Value')
sns.distplot(rprice,hist=False,color='b',label='Ridge Predicted',ax=aa)
plt.close()
fig = plt.figure(figsize=(20,6))
ax1 = fig.add_subplot(3,2,1)
ax2 = fig.add_subplot(3,2,2)
ax3 = fig.add_subplot(3,2,3)
ax4 = fig.add_subplot(3,2,4)
ax5 = fig.add_subplot(3,2,5)
aa = sns.distplot(ytest,hist=False,color='r',label='Actual Value',ax=ax1)
sns.distplot(yhattest,hist=False,color='b',label='Predicted Trained Value',ax=aa)
ab = sns.distplot(ytrain,hist=False,color='r',label='Actual Value',ax=ax2)
sns.distplot(rp,hist=False,color='b',label='Ridge Predicted',ax=ab)
ac = sns.distplot(ytrain,hist=False,color='r',label='Actual Value',ax=ax3)
sns.distplot(pipeprice,hist=False,color='b',label='Ridge Predicted',ax=ac)
ad = sns.distplot(ytrain,hist=False,color='r',label='Actual Value',ax=ax4)
sns.distplot(gprice,hist=False,color='b',label='Ridge Predicted',ax=ad)
ae = sns.distplot(ydata,hist=False,color='r',label='Actual Value',ax=ax5)
sns.distplot(rprice,hist=False,color='b',label='Ridge Predicted',ax=ae)
plt.show()